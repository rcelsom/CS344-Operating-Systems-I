#!/bin/bash

#temporary file declarations:
temp_input="temp_input"
temp_row="temp_row"
temp_col="temp_col"
temp_output="temp_output"
temp_col2="temp_col2"
piped_input="piped_input"

#create trap signal
trap "rm -f $temp_input $temp_row $temp_col $temp_col2 $temp_output $piped_input; echo 'Terminate'; exit 1" INT HUP TERM

#############################################################
#Function: 	findcmd()
#Preconditions: The "matrix" script must be called for findcmd() to execute.
#Postconditions:findcmd() either excutes the command input from the user or exits, sending the value "6" to stderr
#Descritption:  This function filters through input arguments, performs argument matching,
#               verifies that passed arguments are valid, readable, and in the proper quantity.
#               The function consists of a series of nested "if" conditionals. For the "add" and "multiply" functions
#               findcmd() checks to verify that the input matrices are of the proper dimensions. Any input
#               which is deemed invalid will cause findcmd() to exit and send the value "6" to stderr.
#############################################################
findcmd(){
if   [[ $1 == "dims" && $# == "2" && -r "$2" ]]
then
        dims $2

elif [[ $1 == "transpose" &&  $# == "2" && -r "$2" ]]
then
        transpose $2
elif [[ $1 == "mean" &&  $# == "2" && -r "$2" ]]
then
        mean $2
elif [[ $1 == "add" &&  $# == "3" && -r "$2" && -r "$3" ]]
then
	get_row $2
      	row_num1=$?
	get_col $2
        col_num1=$?
	get_row $3
        row_num2=$?
        get_col $3
        col_num2=$?
	if [[ $row_num1 == $row_num2 && $col_num1 == $col_num2 ]]
        then
		add $2 $3
	else
		echo "Input matrices are not of the proper dimensions" >&2
		exit 6
	fi

elif [[ $1 == "multiply" &&  $# == "3" && -r "$2" && -r "$3" ]]
then
	get_col $2
        col_num1=$?
     	get_row $3
        row_num2=$?
        if [[ $row_num2 == $col_num1 ]]
        then
                multiply $2 $3
        else
	        echo "input matrices are not of the proper dimensions" >&2
        	exit 6
	fi

elif [[ $1 == "transpose" &&  $# == "1" ]]
then
        while read line
        do
                echo "$line" >> $piped_input
        done
        transpose $piped_input
        rm $piped_input

elif [[ $1 == "mean" &&  $# == "1" ]]
then
        while read line
        do
                echo "$line" >> $piped_input
        done
        mean $piped_input
        rm $piped_input

elif [[ $1 == "dims" &&  $# == "1" ]]
then
	while read line
        do
                echo "$line" >> $piped_input
        done
        dims $piped_input
        rm $piped_input
else
	echo 6 >&2
	exit 6
fi
}

############################################################
#Function:	dims()
#Preconditions:	The user must either pipe data into matrix and call "dims" as the first argument or the user must call "matrix dims
#		some_matrix_file".
#Postconditions:Dims() returns the the number of rows and columns of the passed matrix file and prints them to the console as
#		"number_rows number_columns".
#Descritption:	Dims() calls the get_row() and get_col() functions which return the number of rows and the number of columns as the
#		return value. Thus by setting the variable "num_row" and "num_col" to "$?", the value contained in the variable is the
#		return value of the previously executed command, in the case of this function call, this is the number of rows or
#		columns of the passed matrix.
############################################################
dims(){
	get_row $1
	row_num=$?
	get_col $1
	col_num=$?
	printf "$row_num $col_num\n"
}

############################################################
#Function:	get_row()
#Preconditions:	The user must call the script "matrix" with the first argument being either "dims()","add()" or "multiply()". Furthermore
#		the passed second or third arguments must be valid, or a valid file is piped into the "matrix" function.
#Postconditions:This function returns the number of rows contained in a given tab delimited matrix file.
#Descritption:	This function reads through a passed file, line by line using
#		the read command in bash. For each iteration of the read command
#		the variable row_num is incremented, thus when read hit the EOF, row_num is equal to the number of rows in the file.
############################################################
get_row(){
 	row_num=0
 	while read myLine
        do
	        ((row_num++))
        done < "$1"
	return $row_num
}

############################################################
#Function:	get_col()
#Preconditions:	The user must call the script "matrix" with the first argument being either "dims()","add()" or "multiply()". Furthermore
#               the passed second or third arguments must be valid, or a valid file is piped into the "matrix" function.
#Postconditions:This function returns the number of columns contained in a given tab delimited matrix file.
#Descritption:	This function reads the first line of a passed matrix file using the
#		read command in bash. The function then iterates through each element
#		contained in the given line incrementing the variable col_num for each iteration of the for loop.
############################################################
get_col(){
   	col_num=0
	read myLine<$1
        for i in $myLine
        do
        	((++col_num))
        done
	return $col_num
}

############################################################
#Function:	transpose()
#Preconditions:	The user must either pipe data into matrix and call "transpose" as the first argument or the user must call "matrix transpose
#               some_matrix_file".
#Postconditions:Transpose() prints the transpose of the matrix.
#Descritption:	Transpose takes a matrix as an argument and reads the top line of the matrix file.
#		The function then iterates through each element in
#		the line. For each column the cut -f command is used to cut each tab
#		delimited column, grabbing the entire field and placing the column in a
#		file named temp_col. The cat command is then use to pipe temp_col
#		into the tr command. The tr command swaps the following two characters
#		specified after the command. In the case of this function, tr swaps the
#		newline character with the tab character and pipes the output
#		into a file named temp_row. Thus temp_row will recieve the columns values
#		of the matrix argument on the same line delimited by tabs.
#		The index variable is incremented so the function can step through each column of the matrix file.
# 		The sed -i command is used on a regular expression. The leading s/ indicates that sed will be manipulating a string.
#		The regular expression \s* indicates zero or more blank spaces followed by the end of a line ($). The -i flag causes
#		sed to only operate on the passed file and actually perform changes to the file. Thus after this line executes, strings
#		with zero or more spaces before an end of line will will be removed.
###########################################################
transpose(){
    	cp $1 $temp_input
	index=1
        read myLine<$temp_input
	for i in $myLine
        do
		cut -f $index $temp_input > $temp_col
		cat $temp_col | tr '\n' '\t' >> $temp_row
		rm $temp_col
		((++index))
		echo >> $temp_row
	done
sed -i 's/\s*$//' $temp_row
cat $temp_row
rm $temp_input $temp_row
}

############################################################
#Function:	mean()
#Preconditions:	The user must either pipe data into matrix and call "mean" as the first argument or the user must call "matrix mean
#               some_matrix_file".
#Postconditions:Mean() prints a one row matrix in which each column of the matrix is the mean of the columns of the passed matrix.
#Descritption:	Mean() first defines a variable named row_num which is equal to the number
#		of rows of the passed matrix. The function then reads the first line
#		of the passed matrix and iterates through each of the elements in the
#		first line using the cut command to select tab delimited fields and write them to
#		a file named temp_col. A nested while loop reads through each element in the temp_col
#		file and the variable num assumes each value on each line. The variable
#		sum is equal to sum plusthe value of num. In this manner, at the end of the while loop,
#		sum is equal to the sum of each column.
#		The value display is equal to the value of sum divided by the number contained in row_num.
#		Display is then appended into the file temp_row. The /t character
#		writes a tab to the file after each display value. The sed command is again used to remove
#		tabs at the end of lines and finally the file temp_row is printed to stdout.
############################################################
mean(){
	cp $1 $temp_input
	get_row $temp_input
	row_num=$?
	index=1
	read myLine<$temp_input
	for i in $myLine
	do
		cut -f $index $temp_input > $temp_col
		sum=0
			while read num
			do
				sum=$(( $sum + $num))
			done < $temp_col
		display=$((($sum + ($row_num/2)*( ($sum>0)*2-1 )) / $row_num))
		echo -en "$display\t" >> $temp_row
		rm $temp_col
		((++index))
	done
	rm $temp_input
	sed -i 's/\s*$//' $temp_row
	cat $temp_row
	rm $temp_row
	echo
}

############################################################
#Function:	add()
#Preconditions:	The user must call "matrix add some_matrix_file".
#Postconditions:Add() returns a matrix which is the sum of two matrices of identical dimensions.
#Descritption:	Add() first reads the contents of the first matrix into an array using a nested for
#		loop within a while loop. The function then iterates through each element
#		of the array adding the values in the second matrix to the values within the array.
#		The index variable needs to be incremented by two per iteration of the inner
#		for loop because every other content of the array is filled with a tab character.
#		The final part of the function first assigns two variables, col_num and row_num
#		which contain the number of columns and rows of the matrix sum.
#		The seq command takes a variable and generates a list of numbers seperated by new lines equal to the
#		the value of the passed variable. If this output is piped to cat and sent to a new file,
#		then the new file will be filled with numbers counting up to the number contained
#		in the variable passed to seq, seperated by new lines. We can pass this file to
#		a while read loop and have the while loop iterate a number of times
#		equal to, in the case of this function, either the number of columns or row
#		of a desired output matrix. By echoing the contents of the array at the proper index
#		and following the value by a tab into a file (temp_output) we generate a file with desired output matrix.
############################################################
add(){
index=0
while read myLine
do
        for i in $myLine
        do
         	array[$index]=$i
		index=$(expr $index + 2)
	done
done<$1

index=0
while read myLine
do
        for i in $myLine
        do
		array[$index]=$(expr $i +  ${array[$index]})
                index=$(expr $index + 2)
        done
done<$2

get_col $1
col_num=$?
get_row $1
row_num=$?

seq $col_num|cat > $temp_col
seq $row_num|cat > $temp_row
index=0
while read myLine1
do
	while read myLine2
	do
		echo -en "${array[$index]}\t" >> $temp_output
		index=$(expr $index + 2)
	done < $temp_col
	echo >> $temp_output
done < $temp_row
sed -i 's/\s*$//' $temp_output
cat $temp_output

rm $temp_output $temp_row $temp_col
}

############################################################
#Function:	multiply()
#Preconditions: The user must call "matrix multiply matrix_one matrix_two".
#Postconditions:Multiply() prints the dot product of two matrices. The columns of the first matrix must be equal to the number of rows of the second matrix.
#Descritption:	Multiply() first loops through each element in the matrix, placing them into an array. The function then loops through the second matrix,
#		performing an algorithm identical to the tranpose function. The transposition of the second matrix is stroed in a file named temp_row. In
#		matrix multiplication each indexed term in each row of the first matrix is multiplied by the value
#		at the corresponding index of the columns of the second matrix.
#		Thus by taking the transposition we rearrange the columns of the second matrix to be on the same line.
#		The function then reads the transposition of the second matrix into an array.
#		Finally the function executes a triple nested loop. The outer most loop iterates eqaul to
#		the number of rows of the second matrix, the middle nested loop iterates
#		equal to the number of columns of the first matrix and the inner loop iterates equal
#		to the number of elements contained in a row of the first matrix. Each iteration
#		of the inner most loop will perform the dot product of a single row and a single column.
#		This output is then appended to a file named temp_out followed by a tab character.
#		The outer and middle loop increment to index of the row of the first matrix "columns" of
#		the second matrix (they are arranged sequentially in array2). In this fashion
#		the function steps through every element in both arrays and computes matrix multiplication.
############################################################
multiply(){
cp $2 $temp_input

#reads in the first matrix, rows are used
index=0
while read myLine
do
        for i in $myLine
        do
               	array1[$index]=$i
		index=$(expr $index + 2)
        done
done<$1

#read in m2 (cols matrix) and organize them in a file called temp_row 
index=1
read myLine<$temp_input
for i in $myLine
do
	cut -f $index $temp_input > $temp_col
        cat $temp_col | tr '\n' '\t' >> $temp_row
	echo >> $temp_row
        rm $temp_col
       	((++index))
done
#exiting this function the file temp_row has m2 contains the transposition of the matrix
#we now want to read the transposition into an array

index=0
while read myLine
do
        for i in $myLine
        do
                array2[$index]=$i
		index=$(expr $index + 2)
        done
done<$temp_row
rm $temp_row

#operate equal to the row of m1 times the cols of m2
get_row $1
row_num1=$?
get_col $1
col_num1=$?
get_row $2
row_num2=$?
get_col $2
col_num2=$?

#A zero needs to be on the first line of temp_col2 for proper indexing
echo "0" > $temp_col2
((--col_num1))
seq $col_num1|cat >> $temp_col2
((++col_num1))

seq $col_num2|cat > $temp_col
seq $row_num1|cat > $temp_row
count1=0
while read myLine1
do
	count2=0
        while read myLine2
        do
		while read index
		do
			index_count=$(( $index * 2))
			index1=$(expr $index_count + $count1)
			index2=$(expr $index_count + $count2)
			num=$(( ${array1[$index1]} * ${array2[$index2]}))
			num_final=$(expr $num_final + $num)
		done < $temp_col2

		echo -en "$num_final\t" >> $temp_output
		step2=$((2*$row_num2))
		count2=$(expr $count2 + $step2)
		num_final=0
        done < $temp_col
echo >> $temp_output
step2=$((2*$col_num1))
count1=$(expr $count1 + $step2)
done < $temp_row
sed -i 's/\s*$//' $temp_output
cat $temp_output
rm $temp_input $temp_row $temp_col $temp_output $temp_col2
}

#call findcmd() to begin the script
findcmd $1 $2 $3
